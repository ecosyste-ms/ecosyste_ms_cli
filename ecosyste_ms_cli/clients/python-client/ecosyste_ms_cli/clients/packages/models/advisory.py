# coding: utf-8

"""
    Ecosyste.ms: Packages

    An open API service providing package, version and dependency metadata of many open source software ecosystems and registries.

    The version of the OpenAPI document: 1.1.0
    Contact: support@ecosyste.ms
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Advisory(BaseModel):
    """
    Advisory
    """ # noqa: E501
    uuid: StrictStr
    url: Optional[StrictStr]
    title: Optional[StrictStr]
    description: Optional[StrictStr]
    origin: Optional[StrictStr]
    severity: Optional[StrictStr]
    published_at: Optional[StrictStr]
    withdrawn_at: Optional[StrictStr]
    classification: Optional[StrictStr]
    cvss_score: Optional[Union[StrictFloat, StrictInt]]
    cvss_vector: Optional[StrictStr]
    references: List[Optional[StrictStr]]
    source_kind: Optional[StrictStr]
    identifiers: List[Optional[StrictStr]]
    packages: List[Dict[str, Any]]
    created_at: StrictStr
    updated_at: StrictStr
    __properties: ClassVar[List[str]] = ["uuid", "url", "title", "description", "origin", "severity", "published_at", "withdrawn_at", "classification", "cvss_score", "cvss_vector", "references", "source_kind", "identifiers", "packages", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Advisory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if origin (nullable) is None
        # and model_fields_set contains the field
        if self.origin is None and "origin" in self.model_fields_set:
            _dict['origin'] = None

        # set to None if severity (nullable) is None
        # and model_fields_set contains the field
        if self.severity is None and "severity" in self.model_fields_set:
            _dict['severity'] = None

        # set to None if published_at (nullable) is None
        # and model_fields_set contains the field
        if self.published_at is None and "published_at" in self.model_fields_set:
            _dict['published_at'] = None

        # set to None if withdrawn_at (nullable) is None
        # and model_fields_set contains the field
        if self.withdrawn_at is None and "withdrawn_at" in self.model_fields_set:
            _dict['withdrawn_at'] = None

        # set to None if classification (nullable) is None
        # and model_fields_set contains the field
        if self.classification is None and "classification" in self.model_fields_set:
            _dict['classification'] = None

        # set to None if cvss_score (nullable) is None
        # and model_fields_set contains the field
        if self.cvss_score is None and "cvss_score" in self.model_fields_set:
            _dict['cvss_score'] = None

        # set to None if cvss_vector (nullable) is None
        # and model_fields_set contains the field
        if self.cvss_vector is None and "cvss_vector" in self.model_fields_set:
            _dict['cvss_vector'] = None

        # set to None if source_kind (nullable) is None
        # and model_fields_set contains the field
        if self.source_kind is None and "source_kind" in self.model_fields_set:
            _dict['source_kind'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Advisory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "url": obj.get("url"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "origin": obj.get("origin"),
            "severity": obj.get("severity"),
            "published_at": obj.get("published_at"),
            "withdrawn_at": obj.get("withdrawn_at"),
            "classification": obj.get("classification"),
            "cvss_score": obj.get("cvss_score"),
            "cvss_vector": obj.get("cvss_vector"),
            "references": obj.get("references"),
            "source_kind": obj.get("source_kind"),
            "identifiers": obj.get("identifiers"),
            "packages": obj.get("packages"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


