# coding: utf-8

"""
    Ecosyste.ms: Repos

    An open API service providing repository metadata for many open source software ecosystems.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ecosyste.ms
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ecosyste_ms_cli.clients.repos.api.default_api import DefaultApi


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self) -> None:
        self.api = DefaultApi()

    def tearDown(self) -> None:
        pass

    def test_get_host(self) -> None:
        """Test case for get_host

        get a host by name
        """
        pass

    def test_get_host_owner(self) -> None:
        """Test case for get_host_owner

        get a owner by login
        """
        pass

    def test_get_host_owner_repositories(self) -> None:
        """Test case for get_host_owner_repositories

        get a list of repositories from a owner
        """
        pass

    def test_get_host_owners(self) -> None:
        """Test case for get_host_owners

        get a list of owners from a host
        """
        pass

    def test_get_host_repositories(self) -> None:
        """Test case for get_host_repositories

        get a list of repositories from a host
        """
        pass

    def test_get_host_repository(self) -> None:
        """Test case for get_host_repository

        get a repository by name
        """
        pass

    def test_get_host_repository_manifests(self) -> None:
        """Test case for get_host_repository_manifests

        get a list of manifests for a repository
        """
        pass

    def test_get_host_repository_names(self) -> None:
        """Test case for get_host_repository_names

        get a list of repository names from a host
        """
        pass

    def test_get_host_repository_release(self) -> None:
        """Test case for get_host_repository_release

        get a release for a repository
        """
        pass

    def test_get_host_repository_releases(self) -> None:
        """Test case for get_host_repository_releases

        get a list of releases for a repository
        """
        pass

    def test_get_host_repository_tag(self) -> None:
        """Test case for get_host_repository_tag

        get a tag for a repository
        """
        pass

    def test_get_host_repository_tag_manifests(self) -> None:
        """Test case for get_host_repository_tag_manifests

        get dependency manifests for a tag
        """
        pass

    def test_get_host_repository_tags(self) -> None:
        """Test case for get_host_repository_tags

        get a list of tags for a repository
        """
        pass

    def test_get_registries(self) -> None:
        """Test case for get_registries

        list registies
        """
        pass

    def test_lookup_host_owner(self) -> None:
        """Test case for lookup_host_owner

        lookup owner by name or email
        """
        pass

    def test_repositories_lookup(self) -> None:
        """Test case for repositories_lookup

        Lookup repository metadata by url or purl
        """
        pass

    def test_topic(self) -> None:
        """Test case for topic

        Get topic
        """
        pass

    def test_topics(self) -> None:
        """Test case for topics

        Get topics
        """
        pass

    def test_usage(self) -> None:
        """Test case for usage

        Get package usage ecosystems
        """
        pass

    def test_usage_ecosystem(self) -> None:
        """Test case for usage_ecosystem

        Get package usage for an ecosystem
        """
        pass

    def test_usage_package(self) -> None:
        """Test case for usage_package

        Get package usage for a package
        """
        pass

    def test_usage_package_dependencies(self) -> None:
        """Test case for usage_package_dependencies

        Get dependent repositories for a package
        """
        pass


if __name__ == '__main__':
    unittest.main()
