# coding: utf-8

"""
    Ecosyste.ms: Packages

    An open API service providing package, version and dependency metadata of many open source software ecosystems and registries.

    The version of the OpenAPI document: 1.1.0
    Contact: support@ecosyste.ms
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ecosyste_ms_cli.clients.packages.models.advisory import Advisory
from ecosyste_ms_cli.clients.packages.models.maintainer import Maintainer
from ecosyste_ms_cli.clients.packages.models.registry import Registry
from typing import Optional, Set
from typing_extensions import Self

class PackageWithRegistry(BaseModel):
    """
    PackageWithRegistry
    """ # noqa: E501
    id: StrictInt
    name: StrictStr
    ecosystem: StrictStr
    description: Optional[StrictStr]
    homepage: Optional[StrictStr]
    licenses: Optional[StrictStr]
    normalized_licenses: List[StrictStr]
    repository_url: Optional[StrictStr]
    keywords_array: List[StrictStr]
    namespace: Optional[StrictStr]
    versions_count: StrictInt
    first_release_published_at: Optional[datetime]
    latest_release_published_at: Optional[datetime]
    latest_release_number: Optional[StrictStr]
    last_synced_at: Optional[datetime]
    created_at: datetime
    updated_at: datetime
    registry_url: Optional[StrictStr]
    documentation_url: Optional[StrictStr]
    install_command: Optional[StrictStr]
    metadata: Optional[Dict[str, Any]]
    repo_metadata: Optional[Dict[str, Any]]
    repo_metadata_updated_at: Optional[datetime]
    dependent_packages_count: StrictInt
    downloads: StrictInt
    downloads_period: Optional[StrictStr]
    dependent_repos_count: StrictInt
    rankings: Dict[str, Any]
    purl: StrictStr
    advisories: List[Advisory]
    versions_url: StrictStr
    version_numbers_url: Optional[StrictStr] = None
    dependent_packages_url: StrictStr
    related_packages_url: StrictStr
    docker_usage_url: StrictStr
    docker_dependents_count: StrictInt
    docker_downloads_count: StrictInt
    usage_url: StrictStr
    dependent_repositories_url: StrictStr
    status: Optional[StrictStr]
    funding_links: List[StrictStr]
    maintainers: List[Maintainer]
    critical: StrictBool
    registry: Registry
    __properties: ClassVar[List[str]] = ["id", "name", "ecosystem", "description", "homepage", "licenses", "normalized_licenses", "repository_url", "keywords_array", "namespace", "versions_count", "first_release_published_at", "latest_release_published_at", "latest_release_number", "last_synced_at", "created_at", "updated_at", "registry_url", "documentation_url", "install_command", "metadata", "repo_metadata", "repo_metadata_updated_at", "dependent_packages_count", "downloads", "downloads_period", "dependent_repos_count", "rankings", "purl", "advisories", "versions_url", "version_numbers_url", "dependent_packages_url", "related_packages_url", "docker_usage_url", "docker_dependents_count", "docker_downloads_count", "usage_url", "dependent_repositories_url", "status", "funding_links", "maintainers", "critical", "registry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageWithRegistry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in advisories (list)
        _items = []
        if self.advisories:
            for _item_advisories in self.advisories:
                if _item_advisories:
                    _items.append(_item_advisories.to_dict())
            _dict['advisories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in maintainers (list)
        _items = []
        if self.maintainers:
            for _item_maintainers in self.maintainers:
                if _item_maintainers:
                    _items.append(_item_maintainers.to_dict())
            _dict['maintainers'] = _items
        # override the default output from pydantic by calling `to_dict()` of registry
        if self.registry:
            _dict['registry'] = self.registry.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if homepage (nullable) is None
        # and model_fields_set contains the field
        if self.homepage is None and "homepage" in self.model_fields_set:
            _dict['homepage'] = None

        # set to None if licenses (nullable) is None
        # and model_fields_set contains the field
        if self.licenses is None and "licenses" in self.model_fields_set:
            _dict['licenses'] = None

        # set to None if repository_url (nullable) is None
        # and model_fields_set contains the field
        if self.repository_url is None and "repository_url" in self.model_fields_set:
            _dict['repository_url'] = None

        # set to None if namespace (nullable) is None
        # and model_fields_set contains the field
        if self.namespace is None and "namespace" in self.model_fields_set:
            _dict['namespace'] = None

        # set to None if first_release_published_at (nullable) is None
        # and model_fields_set contains the field
        if self.first_release_published_at is None and "first_release_published_at" in self.model_fields_set:
            _dict['first_release_published_at'] = None

        # set to None if latest_release_published_at (nullable) is None
        # and model_fields_set contains the field
        if self.latest_release_published_at is None and "latest_release_published_at" in self.model_fields_set:
            _dict['latest_release_published_at'] = None

        # set to None if latest_release_number (nullable) is None
        # and model_fields_set contains the field
        if self.latest_release_number is None and "latest_release_number" in self.model_fields_set:
            _dict['latest_release_number'] = None

        # set to None if last_synced_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_synced_at is None and "last_synced_at" in self.model_fields_set:
            _dict['last_synced_at'] = None

        # set to None if registry_url (nullable) is None
        # and model_fields_set contains the field
        if self.registry_url is None and "registry_url" in self.model_fields_set:
            _dict['registry_url'] = None

        # set to None if documentation_url (nullable) is None
        # and model_fields_set contains the field
        if self.documentation_url is None and "documentation_url" in self.model_fields_set:
            _dict['documentation_url'] = None

        # set to None if install_command (nullable) is None
        # and model_fields_set contains the field
        if self.install_command is None and "install_command" in self.model_fields_set:
            _dict['install_command'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if repo_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.repo_metadata is None and "repo_metadata" in self.model_fields_set:
            _dict['repo_metadata'] = None

        # set to None if repo_metadata_updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.repo_metadata_updated_at is None and "repo_metadata_updated_at" in self.model_fields_set:
            _dict['repo_metadata_updated_at'] = None

        # set to None if downloads_period (nullable) is None
        # and model_fields_set contains the field
        if self.downloads_period is None and "downloads_period" in self.model_fields_set:
            _dict['downloads_period'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageWithRegistry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "ecosystem": obj.get("ecosystem"),
            "description": obj.get("description"),
            "homepage": obj.get("homepage"),
            "licenses": obj.get("licenses"),
            "normalized_licenses": obj.get("normalized_licenses"),
            "repository_url": obj.get("repository_url"),
            "keywords_array": obj.get("keywords_array"),
            "namespace": obj.get("namespace"),
            "versions_count": obj.get("versions_count"),
            "first_release_published_at": obj.get("first_release_published_at"),
            "latest_release_published_at": obj.get("latest_release_published_at"),
            "latest_release_number": obj.get("latest_release_number"),
            "last_synced_at": obj.get("last_synced_at"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "registry_url": obj.get("registry_url"),
            "documentation_url": obj.get("documentation_url"),
            "install_command": obj.get("install_command"),
            "metadata": obj.get("metadata"),
            "repo_metadata": obj.get("repo_metadata"),
            "repo_metadata_updated_at": obj.get("repo_metadata_updated_at"),
            "dependent_packages_count": obj.get("dependent_packages_count"),
            "downloads": obj.get("downloads"),
            "downloads_period": obj.get("downloads_period"),
            "dependent_repos_count": obj.get("dependent_repos_count"),
            "rankings": obj.get("rankings"),
            "purl": obj.get("purl"),
            "advisories": [Advisory.from_dict(_item) for _item in obj["advisories"]] if obj.get("advisories") is not None else None,
            "versions_url": obj.get("versions_url"),
            "version_numbers_url": obj.get("version_numbers_url"),
            "dependent_packages_url": obj.get("dependent_packages_url"),
            "related_packages_url": obj.get("related_packages_url"),
            "docker_usage_url": obj.get("docker_usage_url"),
            "docker_dependents_count": obj.get("docker_dependents_count"),
            "docker_downloads_count": obj.get("docker_downloads_count"),
            "usage_url": obj.get("usage_url"),
            "dependent_repositories_url": obj.get("dependent_repositories_url"),
            "status": obj.get("status"),
            "funding_links": obj.get("funding_links"),
            "maintainers": [Maintainer.from_dict(_item) for _item in obj["maintainers"]] if obj.get("maintainers") is not None else None,
            "critical": obj.get("critical"),
            "registry": Registry.from_dict(obj["registry"]) if obj.get("registry") is not None else None
        })
        return _obj


