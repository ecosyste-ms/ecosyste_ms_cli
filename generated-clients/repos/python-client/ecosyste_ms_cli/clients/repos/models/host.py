# coding: utf-8

"""
    Ecosyste.ms: Repos

    An open API service providing repository metadata for many open source software ecosystems.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ecosyste.ms
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Host(BaseModel):
    """
    Host
    """ # noqa: E501
    name: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    kind: Optional[StrictStr] = None
    repositories_count: Optional[StrictInt] = None
    owners_count: Optional[StrictInt] = None
    icon_url: Optional[StrictStr] = None
    host_url: Optional[StrictStr] = None
    repositoris_url: Optional[StrictStr] = None
    repository_names_url: Optional[StrictStr] = None
    owners_url: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["name", "url", "kind", "repositories_count", "owners_count", "icon_url", "host_url", "repositoris_url", "repository_names_url", "owners_url", "version", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Host from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Host from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "url": obj.get("url"),
            "kind": obj.get("kind"),
            "repositories_count": obj.get("repositories_count"),
            "owners_count": obj.get("owners_count"),
            "icon_url": obj.get("icon_url"),
            "host_url": obj.get("host_url"),
            "repositoris_url": obj.get("repositoris_url"),
            "repository_names_url": obj.get("repository_names_url"),
            "owners_url": obj.get("owners_url"),
            "version": obj.get("version"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


