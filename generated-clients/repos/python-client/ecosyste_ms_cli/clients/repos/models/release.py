# coding: utf-8

"""
    Ecosyste.ms: Repos

    An open API service providing repository metadata for many open source software ecosystems.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ecosyste.ms
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Release(BaseModel):
    """
    Release
    """ # noqa: E501
    name: Optional[StrictStr] = None
    uuid: Optional[StrictStr] = None
    tag_name: Optional[StrictStr] = None
    target_commitish: Optional[StrictStr] = None
    body: Optional[StrictStr] = None
    draft: Optional[StrictBool] = None
    prerelease: Optional[StrictBool] = None
    published_at: Optional[datetime] = None
    created_at: Optional[datetime] = None
    author: Optional[StrictStr] = None
    assets: Optional[List[Dict[str, Any]]] = None
    last_synced_at: Optional[datetime] = None
    tag_url: Optional[StrictStr] = None
    html_url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["name", "uuid", "tag_name", "target_commitish", "body", "draft", "prerelease", "published_at", "created_at", "author", "assets", "last_synced_at", "tag_url", "html_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Release from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Release from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "uuid": obj.get("uuid"),
            "tag_name": obj.get("tag_name"),
            "target_commitish": obj.get("target_commitish"),
            "body": obj.get("body"),
            "draft": obj.get("draft"),
            "prerelease": obj.get("prerelease"),
            "published_at": obj.get("published_at"),
            "created_at": obj.get("created_at"),
            "author": obj.get("author"),
            "assets": obj.get("assets"),
            "last_synced_at": obj.get("last_synced_at"),
            "tag_url": obj.get("tag_url"),
            "html_url": obj.get("html_url")
        })
        return _obj


