# coding: utf-8

"""
    Ecosyste.ms: Repos

    An open API service providing repository metadata for many open source software ecosystems.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ecosyste.ms
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ecosyste_ms_cli.clients.repos.models.dependency import Dependency
from typing import Optional, Set
from typing_extensions import Self

class Manifest(BaseModel):
    """
    Manifest
    """ # noqa: E501
    ecosystem: Optional[StrictStr] = None
    filepath: Optional[StrictStr] = None
    sha: Optional[StrictStr] = None
    kind: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    repository_link: Optional[StrictStr] = None
    dependencies: Optional[List[Dependency]] = None
    __properties: ClassVar[List[str]] = ["ecosystem", "filepath", "sha", "kind", "created_at", "updated_at", "repository_link", "dependencies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Manifest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dependencies (list)
        _items = []
        if self.dependencies:
            for _item_dependencies in self.dependencies:
                if _item_dependencies:
                    _items.append(_item_dependencies.to_dict())
            _dict['dependencies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Manifest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ecosystem": obj.get("ecosystem"),
            "filepath": obj.get("filepath"),
            "sha": obj.get("sha"),
            "kind": obj.get("kind"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "repository_link": obj.get("repository_link"),
            "dependencies": [Dependency.from_dict(_item) for _item in obj["dependencies"]] if obj.get("dependencies") is not None else None
        })
        return _obj


