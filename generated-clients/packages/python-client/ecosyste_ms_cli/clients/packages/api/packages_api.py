# coding: utf-8

"""
    Ecosyste.ms: Packages

    An open API service providing package, version and dependency metadata of many open source software ecosystems and registries.

    The version of the OpenAPI document: 1.1.0
    Contact: support@ecosyste.ms
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from ecosyste_ms_cli.clients.packages.models.package import Package
from ecosyste_ms_cli.clients.packages.models.package_with_registry import PackageWithRegistry
from ecosyste_ms_cli.clients.packages.models.version import Version
from ecosyste_ms_cli.clients.packages.models.version_with_dependencies import VersionWithDependencies
from ecosyste_ms_cli.clients.packages.models.version_with_package import VersionWithPackage

from ecosyste_ms_cli.clients.packages.api_client import ApiClient, RequestSerialized
from ecosyste_ms_cli.clients.packages.api_response import ApiResponse
from ecosyste_ms_cli.clients.packages.rest import RESTResponseType


class PackagesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_registry_package(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Package:
        """get a package by name


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_serialize(
            registry_name=registry_name,
            package_name=package_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Package",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_registry_package_with_http_info(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Package]:
        """get a package by name


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_serialize(
            registry_name=registry_name,
            package_name=package_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Package",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_registry_package_without_preload_content(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get a package by name


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_serialize(
            registry_name=registry_name,
            package_name=package_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Package",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_registry_package_serialize(
        self,
        registry_name,
        package_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if registry_name is not None:
            _path_params['registryName'] = registry_name
        if package_name is not None:
            _path_params['packageName'] = package_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/registries/{registryName}/packages/{packageName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_registry_package_dependent_package_kinds(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        latest: Annotated[Optional[StrictBool], Field(description="filter by latest version")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """get a list of dependency kinds for a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param latest: filter by latest version
        :type latest: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_dependent_package_kinds_serialize(
            registry_name=registry_name,
            package_name=package_name,
            latest=latest,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_registry_package_dependent_package_kinds_with_http_info(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        latest: Annotated[Optional[StrictBool], Field(description="filter by latest version")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """get a list of dependency kinds for a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param latest: filter by latest version
        :type latest: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_dependent_package_kinds_serialize(
            registry_name=registry_name,
            package_name=package_name,
            latest=latest,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_registry_package_dependent_package_kinds_without_preload_content(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        latest: Annotated[Optional[StrictBool], Field(description="filter by latest version")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get a list of dependency kinds for a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param latest: filter by latest version
        :type latest: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_dependent_package_kinds_serialize(
            registry_name=registry_name,
            package_name=package_name,
            latest=latest,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_registry_package_dependent_package_kinds_serialize(
        self,
        registry_name,
        package_name,
        latest,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if registry_name is not None:
            _path_params['registryName'] = registry_name
        if package_name is not None:
            _path_params['packageName'] = package_name
        # process the query parameters
        if latest is not None:
            
            _query_params.append(('latest', latest))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/registries/{registryName}/packages/{packageName}/dependent_package_kinds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_registry_package_dependent_packages(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        latest: Annotated[Optional[StrictBool], Field(description="filter by latest version")] = None,
        kind: Annotated[Optional[StrictStr], Field(description="filter by dependency kind")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Package]:
        """get a list of packages that depend on a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param latest: filter by latest version
        :type latest: bool
        :param kind: filter by dependency kind
        :type kind: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_dependent_packages_serialize(
            registry_name=registry_name,
            package_name=package_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            sort=sort,
            order=order,
            latest=latest,
            kind=kind,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Package]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_registry_package_dependent_packages_with_http_info(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        latest: Annotated[Optional[StrictBool], Field(description="filter by latest version")] = None,
        kind: Annotated[Optional[StrictStr], Field(description="filter by dependency kind")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Package]]:
        """get a list of packages that depend on a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param latest: filter by latest version
        :type latest: bool
        :param kind: filter by dependency kind
        :type kind: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_dependent_packages_serialize(
            registry_name=registry_name,
            package_name=package_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            sort=sort,
            order=order,
            latest=latest,
            kind=kind,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Package]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_registry_package_dependent_packages_without_preload_content(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        latest: Annotated[Optional[StrictBool], Field(description="filter by latest version")] = None,
        kind: Annotated[Optional[StrictStr], Field(description="filter by dependency kind")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get a list of packages that depend on a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param latest: filter by latest version
        :type latest: bool
        :param kind: filter by dependency kind
        :type kind: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_dependent_packages_serialize(
            registry_name=registry_name,
            package_name=package_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            sort=sort,
            order=order,
            latest=latest,
            kind=kind,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Package]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_registry_package_dependent_packages_serialize(
        self,
        registry_name,
        package_name,
        page,
        per_page,
        created_after,
        updated_after,
        sort,
        order,
        latest,
        kind,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if registry_name is not None:
            _path_params['registryName'] = registry_name
        if package_name is not None:
            _path_params['packageName'] = package_name
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if created_after is not None:
            if isinstance(created_after, datetime):
                _query_params.append(
                    (
                        'created_after',
                        created_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_after', created_after))
            
        if updated_after is not None:
            if isinstance(updated_after, datetime):
                _query_params.append(
                    (
                        'updated_after',
                        updated_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_after', updated_after))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if latest is not None:
            
            _query_params.append(('latest', latest))
            
        if kind is not None:
            
            _query_params.append(('kind', kind))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/registries/{registryName}/packages/{packageName}/dependent_packages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_registry_package_names(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        created_before: Annotated[Optional[datetime], Field(description="filter by created_at before given time")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="filter by updated_at before given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """get a list of package names from a registry


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param created_before: filter by created_at before given time
        :type created_before: datetime
        :param updated_before: filter by updated_at before given time
        :type updated_before: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_names_serialize(
            registry_name=registry_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            created_before=created_before,
            updated_before=updated_before,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_registry_package_names_with_http_info(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        created_before: Annotated[Optional[datetime], Field(description="filter by created_at before given time")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="filter by updated_at before given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """get a list of package names from a registry


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param created_before: filter by created_at before given time
        :type created_before: datetime
        :param updated_before: filter by updated_at before given time
        :type updated_before: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_names_serialize(
            registry_name=registry_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            created_before=created_before,
            updated_before=updated_before,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_registry_package_names_without_preload_content(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        created_before: Annotated[Optional[datetime], Field(description="filter by created_at before given time")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="filter by updated_at before given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get a list of package names from a registry


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param created_before: filter by created_at before given time
        :type created_before: datetime
        :param updated_before: filter by updated_at before given time
        :type updated_before: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_names_serialize(
            registry_name=registry_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            created_before=created_before,
            updated_before=updated_before,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_registry_package_names_serialize(
        self,
        registry_name,
        page,
        per_page,
        created_after,
        updated_after,
        created_before,
        updated_before,
        sort,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if registry_name is not None:
            _path_params['registryName'] = registry_name
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if created_after is not None:
            if isinstance(created_after, datetime):
                _query_params.append(
                    (
                        'created_after',
                        created_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_after', created_after))
            
        if updated_after is not None:
            if isinstance(updated_after, datetime):
                _query_params.append(
                    (
                        'updated_after',
                        updated_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_after', updated_after))
            
        if created_before is not None:
            if isinstance(created_before, datetime):
                _query_params.append(
                    (
                        'created_before',
                        created_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_before', created_before))
            
        if updated_before is not None:
            if isinstance(updated_before, datetime):
                _query_params.append(
                    (
                        'updated_before',
                        updated_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_before', updated_before))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/registries/{registryName}/package_names',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_registry_package_related_packages(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Package]:
        """get a list of packages that are related to a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_related_packages_serialize(
            registry_name=registry_name,
            package_name=package_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Package]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_registry_package_related_packages_with_http_info(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Package]]:
        """get a list of packages that are related to a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_related_packages_serialize(
            registry_name=registry_name,
            package_name=package_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Package]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_registry_package_related_packages_without_preload_content(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get a list of packages that are related to a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_related_packages_serialize(
            registry_name=registry_name,
            package_name=package_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Package]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_registry_package_related_packages_serialize(
        self,
        registry_name,
        package_name,
        page,
        per_page,
        created_after,
        updated_after,
        sort,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if registry_name is not None:
            _path_params['registryName'] = registry_name
        if package_name is not None:
            _path_params['packageName'] = package_name
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if created_after is not None:
            if isinstance(created_after, datetime):
                _query_params.append(
                    (
                        'created_after',
                        created_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_after', created_after))
            
        if updated_after is not None:
            if isinstance(updated_after, datetime):
                _query_params.append(
                    (
                        'updated_after',
                        updated_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_after', updated_after))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/registries/{registryName}/packages/{packageName}/related_packages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_registry_package_version(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        version_number: Annotated[StrictStr, Field(description="number of version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VersionWithDependencies:
        """get a version of a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param version_number: number of version (required)
        :type version_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_version_serialize(
            registry_name=registry_name,
            package_name=package_name,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VersionWithDependencies",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_registry_package_version_with_http_info(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        version_number: Annotated[StrictStr, Field(description="number of version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VersionWithDependencies]:
        """get a version of a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param version_number: number of version (required)
        :type version_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_version_serialize(
            registry_name=registry_name,
            package_name=package_name,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VersionWithDependencies",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_registry_package_version_without_preload_content(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        version_number: Annotated[StrictStr, Field(description="number of version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get a version of a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param version_number: number of version (required)
        :type version_number: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_version_serialize(
            registry_name=registry_name,
            package_name=package_name,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VersionWithDependencies",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_registry_package_version_serialize(
        self,
        registry_name,
        package_name,
        version_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if registry_name is not None:
            _path_params['registryName'] = registry_name
        if package_name is not None:
            _path_params['packageName'] = package_name
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/registries/{registryName}/packages/{packageName}/versions/{versionNumber}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_registry_package_version_numbers(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """get a list of version numbers for a package from a registry


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_version_numbers_serialize(
            registry_name=registry_name,
            package_name=package_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_registry_package_version_numbers_with_http_info(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """get a list of version numbers for a package from a registry


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_version_numbers_serialize(
            registry_name=registry_name,
            package_name=package_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_registry_package_version_numbers_without_preload_content(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get a list of version numbers for a package from a registry


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_version_numbers_serialize(
            registry_name=registry_name,
            package_name=package_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_registry_package_version_numbers_serialize(
        self,
        registry_name,
        package_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if registry_name is not None:
            _path_params['registryName'] = registry_name
        if package_name is not None:
            _path_params['packageName'] = package_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/registries/{registryName}/packages/{packageName}/version_numbers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_registry_package_versions(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        published_after: Annotated[Optional[datetime], Field(description="filter by published_at after given time")] = None,
        published_before: Annotated[Optional[datetime], Field(description="filter by published_at before given time")] = None,
        created_before: Annotated[Optional[datetime], Field(description="filter by created_at before given time")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="filter by updated_at before given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Version]:
        """get a list of versions for a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param published_after: filter by published_at after given time
        :type published_after: datetime
        :param published_before: filter by published_at before given time
        :type published_before: datetime
        :param created_before: filter by created_at before given time
        :type created_before: datetime
        :param updated_before: filter by updated_at before given time
        :type updated_before: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_versions_serialize(
            registry_name=registry_name,
            package_name=package_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            published_after=published_after,
            published_before=published_before,
            created_before=created_before,
            updated_before=updated_before,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Version]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_registry_package_versions_with_http_info(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        published_after: Annotated[Optional[datetime], Field(description="filter by published_at after given time")] = None,
        published_before: Annotated[Optional[datetime], Field(description="filter by published_at before given time")] = None,
        created_before: Annotated[Optional[datetime], Field(description="filter by created_at before given time")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="filter by updated_at before given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Version]]:
        """get a list of versions for a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param published_after: filter by published_at after given time
        :type published_after: datetime
        :param published_before: filter by published_at before given time
        :type published_before: datetime
        :param created_before: filter by created_at before given time
        :type created_before: datetime
        :param updated_before: filter by updated_at before given time
        :type updated_before: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_versions_serialize(
            registry_name=registry_name,
            package_name=package_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            published_after=published_after,
            published_before=published_before,
            created_before=created_before,
            updated_before=updated_before,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Version]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_registry_package_versions_without_preload_content(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        package_name: Annotated[StrictStr, Field(description="name of package")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        published_after: Annotated[Optional[datetime], Field(description="filter by published_at after given time")] = None,
        published_before: Annotated[Optional[datetime], Field(description="filter by published_at before given time")] = None,
        created_before: Annotated[Optional[datetime], Field(description="filter by created_at before given time")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="filter by updated_at before given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get a list of versions for a package


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param package_name: name of package (required)
        :type package_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param published_after: filter by published_at after given time
        :type published_after: datetime
        :param published_before: filter by published_at before given time
        :type published_before: datetime
        :param created_before: filter by created_at before given time
        :type created_before: datetime
        :param updated_before: filter by updated_at before given time
        :type updated_before: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_package_versions_serialize(
            registry_name=registry_name,
            package_name=package_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            published_after=published_after,
            published_before=published_before,
            created_before=created_before,
            updated_before=updated_before,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Version]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_registry_package_versions_serialize(
        self,
        registry_name,
        package_name,
        page,
        per_page,
        created_after,
        updated_after,
        published_after,
        published_before,
        created_before,
        updated_before,
        sort,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if registry_name is not None:
            _path_params['registryName'] = registry_name
        if package_name is not None:
            _path_params['packageName'] = package_name
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if created_after is not None:
            if isinstance(created_after, datetime):
                _query_params.append(
                    (
                        'created_after',
                        created_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_after', created_after))
            
        if updated_after is not None:
            if isinstance(updated_after, datetime):
                _query_params.append(
                    (
                        'updated_after',
                        updated_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_after', updated_after))
            
        if published_after is not None:
            if isinstance(published_after, datetime):
                _query_params.append(
                    (
                        'published_after',
                        published_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('published_after', published_after))
            
        if published_before is not None:
            if isinstance(published_before, datetime):
                _query_params.append(
                    (
                        'published_before',
                        published_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('published_before', published_before))
            
        if created_before is not None:
            if isinstance(created_before, datetime):
                _query_params.append(
                    (
                        'created_before',
                        created_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_before', created_before))
            
        if updated_before is not None:
            if isinstance(updated_before, datetime):
                _query_params.append(
                    (
                        'updated_before',
                        updated_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_before', updated_before))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/registries/{registryName}/packages/{packageName}/versions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_registry_packages(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        created_before: Annotated[Optional[datetime], Field(description="filter by created_at before given time")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="filter by updated_at before given time")] = None,
        critical: Annotated[Optional[StrictBool], Field(description="filter by critical packages")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Package]:
        """get a list of packages from a registry


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param created_before: filter by created_at before given time
        :type created_before: datetime
        :param updated_before: filter by updated_at before given time
        :type updated_before: datetime
        :param critical: filter by critical packages
        :type critical: bool
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_packages_serialize(
            registry_name=registry_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            created_before=created_before,
            updated_before=updated_before,
            critical=critical,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Package]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_registry_packages_with_http_info(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        created_before: Annotated[Optional[datetime], Field(description="filter by created_at before given time")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="filter by updated_at before given time")] = None,
        critical: Annotated[Optional[StrictBool], Field(description="filter by critical packages")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Package]]:
        """get a list of packages from a registry


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param created_before: filter by created_at before given time
        :type created_before: datetime
        :param updated_before: filter by updated_at before given time
        :type updated_before: datetime
        :param critical: filter by critical packages
        :type critical: bool
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_packages_serialize(
            registry_name=registry_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            created_before=created_before,
            updated_before=updated_before,
            critical=critical,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Package]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_registry_packages_without_preload_content(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        created_before: Annotated[Optional[datetime], Field(description="filter by created_at before given time")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="filter by updated_at before given time")] = None,
        critical: Annotated[Optional[StrictBool], Field(description="filter by critical packages")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get a list of packages from a registry


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param created_before: filter by created_at before given time
        :type created_before: datetime
        :param updated_before: filter by updated_at before given time
        :type updated_before: datetime
        :param critical: filter by critical packages
        :type critical: bool
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_packages_serialize(
            registry_name=registry_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            created_before=created_before,
            updated_before=updated_before,
            critical=critical,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Package]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_registry_packages_serialize(
        self,
        registry_name,
        page,
        per_page,
        created_after,
        updated_after,
        created_before,
        updated_before,
        critical,
        sort,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if registry_name is not None:
            _path_params['registryName'] = registry_name
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if created_after is not None:
            if isinstance(created_after, datetime):
                _query_params.append(
                    (
                        'created_after',
                        created_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_after', created_after))
            
        if updated_after is not None:
            if isinstance(updated_after, datetime):
                _query_params.append(
                    (
                        'updated_after',
                        updated_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_after', updated_after))
            
        if created_before is not None:
            if isinstance(created_before, datetime):
                _query_params.append(
                    (
                        'created_before',
                        created_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_before', created_before))
            
        if updated_before is not None:
            if isinstance(updated_before, datetime):
                _query_params.append(
                    (
                        'updated_before',
                        updated_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_before', updated_before))
            
        if critical is not None:
            
            _query_params.append(('critical', critical))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/registries/{registryName}/packages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_registry_recent_versions(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        published_after: Annotated[Optional[datetime], Field(description="filter by published_at after given time")] = None,
        published_before: Annotated[Optional[datetime], Field(description="filter by published_at before given time")] = None,
        created_before: Annotated[Optional[datetime], Field(description="filter by created_at before given time")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="filter by updated_at before given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[VersionWithPackage]:
        """get a list of recently published versions from a registry


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param published_after: filter by published_at after given time
        :type published_after: datetime
        :param published_before: filter by published_at before given time
        :type published_before: datetime
        :param created_before: filter by created_at before given time
        :type created_before: datetime
        :param updated_before: filter by updated_at before given time
        :type updated_before: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_recent_versions_serialize(
            registry_name=registry_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            published_after=published_after,
            published_before=published_before,
            created_before=created_before,
            updated_before=updated_before,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VersionWithPackage]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_registry_recent_versions_with_http_info(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        published_after: Annotated[Optional[datetime], Field(description="filter by published_at after given time")] = None,
        published_before: Annotated[Optional[datetime], Field(description="filter by published_at before given time")] = None,
        created_before: Annotated[Optional[datetime], Field(description="filter by created_at before given time")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="filter by updated_at before given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[VersionWithPackage]]:
        """get a list of recently published versions from a registry


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param published_after: filter by published_at after given time
        :type published_after: datetime
        :param published_before: filter by published_at before given time
        :type published_before: datetime
        :param created_before: filter by created_at before given time
        :type created_before: datetime
        :param updated_before: filter by updated_at before given time
        :type updated_before: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_recent_versions_serialize(
            registry_name=registry_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            published_after=published_after,
            published_before=published_before,
            created_before=created_before,
            updated_before=updated_before,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VersionWithPackage]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_registry_recent_versions_without_preload_content(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        created_after: Annotated[Optional[datetime], Field(description="filter by created_at after given time")] = None,
        updated_after: Annotated[Optional[datetime], Field(description="filter by updated_at after given time")] = None,
        published_after: Annotated[Optional[datetime], Field(description="filter by published_at after given time")] = None,
        published_before: Annotated[Optional[datetime], Field(description="filter by published_at before given time")] = None,
        created_before: Annotated[Optional[datetime], Field(description="filter by created_at before given time")] = None,
        updated_before: Annotated[Optional[datetime], Field(description="filter by updated_at before given time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to order results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to order results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get a list of recently published versions from a registry


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param created_after: filter by created_at after given time
        :type created_after: datetime
        :param updated_after: filter by updated_at after given time
        :type updated_after: datetime
        :param published_after: filter by published_at after given time
        :type published_after: datetime
        :param published_before: filter by published_at before given time
        :type published_before: datetime
        :param created_before: filter by created_at before given time
        :type created_before: datetime
        :param updated_before: filter by updated_at before given time
        :type updated_before: datetime
        :param sort: field to order results by
        :type sort: str
        :param order: direction to order results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_registry_recent_versions_serialize(
            registry_name=registry_name,
            page=page,
            per_page=per_page,
            created_after=created_after,
            updated_after=updated_after,
            published_after=published_after,
            published_before=published_before,
            created_before=created_before,
            updated_before=updated_before,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[VersionWithPackage]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_registry_recent_versions_serialize(
        self,
        registry_name,
        page,
        per_page,
        created_after,
        updated_after,
        published_after,
        published_before,
        created_before,
        updated_before,
        sort,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if registry_name is not None:
            _path_params['registryName'] = registry_name
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if created_after is not None:
            if isinstance(created_after, datetime):
                _query_params.append(
                    (
                        'created_after',
                        created_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_after', created_after))
            
        if updated_after is not None:
            if isinstance(updated_after, datetime):
                _query_params.append(
                    (
                        'updated_after',
                        updated_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_after', updated_after))
            
        if published_after is not None:
            if isinstance(published_after, datetime):
                _query_params.append(
                    (
                        'published_after',
                        published_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('published_after', published_after))
            
        if published_before is not None:
            if isinstance(published_before, datetime):
                _query_params.append(
                    (
                        'published_before',
                        published_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('published_before', published_before))
            
        if created_before is not None:
            if isinstance(created_before, datetime):
                _query_params.append(
                    (
                        'created_before',
                        created_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_before', created_before))
            
        if updated_before is not None:
            if isinstance(updated_before, datetime):
                _query_params.append(
                    (
                        'updated_before',
                        updated_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_before', updated_before))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/registries/{registryName}/versions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def lookup_package(
        self,
        repository_url: Annotated[Optional[StrictStr], Field(description="repository URL")] = None,
        purl: Annotated[Optional[StrictStr], Field(description="package URL")] = None,
        ecosystem: Annotated[Optional[StrictStr], Field(description="ecosystem name")] = None,
        name: Annotated[Optional[StrictStr], Field(description="package name")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to sort results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to sort results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[PackageWithRegistry]:
        """lookup a package by repository URL, purl or ecosystem+name


        :param repository_url: repository URL
        :type repository_url: str
        :param purl: package URL
        :type purl: str
        :param ecosystem: ecosystem name
        :type ecosystem: str
        :param name: package name
        :type name: str
        :param sort: field to sort results by
        :type sort: str
        :param order: direction to sort results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._lookup_package_serialize(
            repository_url=repository_url,
            purl=purl,
            ecosystem=ecosystem,
            name=name,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PackageWithRegistry]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def lookup_package_with_http_info(
        self,
        repository_url: Annotated[Optional[StrictStr], Field(description="repository URL")] = None,
        purl: Annotated[Optional[StrictStr], Field(description="package URL")] = None,
        ecosystem: Annotated[Optional[StrictStr], Field(description="ecosystem name")] = None,
        name: Annotated[Optional[StrictStr], Field(description="package name")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to sort results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to sort results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[PackageWithRegistry]]:
        """lookup a package by repository URL, purl or ecosystem+name


        :param repository_url: repository URL
        :type repository_url: str
        :param purl: package URL
        :type purl: str
        :param ecosystem: ecosystem name
        :type ecosystem: str
        :param name: package name
        :type name: str
        :param sort: field to sort results by
        :type sort: str
        :param order: direction to sort results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._lookup_package_serialize(
            repository_url=repository_url,
            purl=purl,
            ecosystem=ecosystem,
            name=name,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PackageWithRegistry]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def lookup_package_without_preload_content(
        self,
        repository_url: Annotated[Optional[StrictStr], Field(description="repository URL")] = None,
        purl: Annotated[Optional[StrictStr], Field(description="package URL")] = None,
        ecosystem: Annotated[Optional[StrictStr], Field(description="ecosystem name")] = None,
        name: Annotated[Optional[StrictStr], Field(description="package name")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to sort results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to sort results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """lookup a package by repository URL, purl or ecosystem+name


        :param repository_url: repository URL
        :type repository_url: str
        :param purl: package URL
        :type purl: str
        :param ecosystem: ecosystem name
        :type ecosystem: str
        :param name: package name
        :type name: str
        :param sort: field to sort results by
        :type sort: str
        :param order: direction to sort results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._lookup_package_serialize(
            repository_url=repository_url,
            purl=purl,
            ecosystem=ecosystem,
            name=name,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PackageWithRegistry]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _lookup_package_serialize(
        self,
        repository_url,
        purl,
        ecosystem,
        name,
        sort,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if repository_url is not None:
            
            _query_params.append(('repository_url', repository_url))
            
        if purl is not None:
            
            _query_params.append(('purl', purl))
            
        if ecosystem is not None:
            
            _query_params.append(('ecosystem', ecosystem))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/packages/lookup',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def lookup_registry_package(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        repository_url: Annotated[Optional[StrictStr], Field(description="repository URL")] = None,
        purl: Annotated[Optional[StrictStr], Field(description="package URL")] = None,
        ecosystem: Annotated[Optional[StrictStr], Field(description="ecosystem name")] = None,
        name: Annotated[Optional[StrictStr], Field(description="package name")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to sort results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to sort results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[PackageWithRegistry]:
        """lookup a package within a registry by repository URL, purl or ecosystem+name


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param repository_url: repository URL
        :type repository_url: str
        :param purl: package URL
        :type purl: str
        :param ecosystem: ecosystem name
        :type ecosystem: str
        :param name: package name
        :type name: str
        :param sort: field to sort results by
        :type sort: str
        :param order: direction to sort results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._lookup_registry_package_serialize(
            registry_name=registry_name,
            repository_url=repository_url,
            purl=purl,
            ecosystem=ecosystem,
            name=name,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PackageWithRegistry]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def lookup_registry_package_with_http_info(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        repository_url: Annotated[Optional[StrictStr], Field(description="repository URL")] = None,
        purl: Annotated[Optional[StrictStr], Field(description="package URL")] = None,
        ecosystem: Annotated[Optional[StrictStr], Field(description="ecosystem name")] = None,
        name: Annotated[Optional[StrictStr], Field(description="package name")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to sort results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to sort results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[PackageWithRegistry]]:
        """lookup a package within a registry by repository URL, purl or ecosystem+name


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param repository_url: repository URL
        :type repository_url: str
        :param purl: package URL
        :type purl: str
        :param ecosystem: ecosystem name
        :type ecosystem: str
        :param name: package name
        :type name: str
        :param sort: field to sort results by
        :type sort: str
        :param order: direction to sort results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._lookup_registry_package_serialize(
            registry_name=registry_name,
            repository_url=repository_url,
            purl=purl,
            ecosystem=ecosystem,
            name=name,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PackageWithRegistry]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def lookup_registry_package_without_preload_content(
        self,
        registry_name: Annotated[StrictStr, Field(description="name of registry")],
        repository_url: Annotated[Optional[StrictStr], Field(description="repository URL")] = None,
        purl: Annotated[Optional[StrictStr], Field(description="package URL")] = None,
        ecosystem: Annotated[Optional[StrictStr], Field(description="ecosystem name")] = None,
        name: Annotated[Optional[StrictStr], Field(description="package name")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to sort results by")] = None,
        order: Annotated[Optional[StrictStr], Field(description="direction to sort results by")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """lookup a package within a registry by repository URL, purl or ecosystem+name


        :param registry_name: name of registry (required)
        :type registry_name: str
        :param repository_url: repository URL
        :type repository_url: str
        :param purl: package URL
        :type purl: str
        :param ecosystem: ecosystem name
        :type ecosystem: str
        :param name: package name
        :type name: str
        :param sort: field to sort results by
        :type sort: str
        :param order: direction to sort results by
        :type order: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._lookup_registry_package_serialize(
            registry_name=registry_name,
            repository_url=repository_url,
            purl=purl,
            ecosystem=ecosystem,
            name=name,
            sort=sort,
            order=order,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[PackageWithRegistry]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _lookup_registry_package_serialize(
        self,
        registry_name,
        repository_url,
        purl,
        ecosystem,
        name,
        sort,
        order,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if registry_name is not None:
            _path_params['registryName'] = registry_name
        # process the query parameters
        if repository_url is not None:
            
            _query_params.append(('repository_url', repository_url))
            
        if purl is not None:
            
            _query_params.append(('purl', purl))
            
        if ecosystem is not None:
            
            _query_params.append(('ecosystem', ecosystem))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/registries/{registryName}/lookup',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


