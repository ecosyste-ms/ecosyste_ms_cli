# coding: utf-8

"""
    Ecosyste.ms: Packages

    An open API service providing package, version and dependency metadata of many open source software ecosystems and registries.

    The version of the OpenAPI document: 1.1.0
    Contact: support@ecosyste.ms
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from ecosyste_ms_cli.clients.packages.models.dependency import Dependency

from ecosyste_ms_cli.clients.packages.api_client import ApiClient, RequestSerialized
from ecosyste_ms_cli.clients.packages.api_response import ApiResponse
from ecosyste_ms_cli.clients.packages.rest import RESTResponseType


class DependenciesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_dependencies(
        self,
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        ecosystem: Annotated[Optional[StrictStr], Field(description="ecosystem name")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="package name")] = None,
        package_id: Annotated[Optional[StrictStr], Field(description="package id")] = None,
        requirements: Annotated[Optional[StrictStr], Field(description="requirements")] = None,
        kind: Annotated[Optional[StrictStr], Field(description="kind")] = None,
        optional: Annotated[Optional[StrictBool], Field(description="optional")] = None,
        after: Annotated[Optional[StrictStr], Field(description="filter by id after given id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Dependency]:
        """list dependencies


        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param ecosystem: ecosystem name
        :type ecosystem: str
        :param package_name: package name
        :type package_name: str
        :param package_id: package id
        :type package_id: str
        :param requirements: requirements
        :type requirements: str
        :param kind: kind
        :type kind: str
        :param optional: optional
        :type optional: bool
        :param after: filter by id after given id
        :type after: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dependencies_serialize(
            page=page,
            per_page=per_page,
            ecosystem=ecosystem,
            package_name=package_name,
            package_id=package_id,
            requirements=requirements,
            kind=kind,
            optional=optional,
            after=after,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Dependency]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_dependencies_with_http_info(
        self,
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        ecosystem: Annotated[Optional[StrictStr], Field(description="ecosystem name")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="package name")] = None,
        package_id: Annotated[Optional[StrictStr], Field(description="package id")] = None,
        requirements: Annotated[Optional[StrictStr], Field(description="requirements")] = None,
        kind: Annotated[Optional[StrictStr], Field(description="kind")] = None,
        optional: Annotated[Optional[StrictBool], Field(description="optional")] = None,
        after: Annotated[Optional[StrictStr], Field(description="filter by id after given id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Dependency]]:
        """list dependencies


        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param ecosystem: ecosystem name
        :type ecosystem: str
        :param package_name: package name
        :type package_name: str
        :param package_id: package id
        :type package_id: str
        :param requirements: requirements
        :type requirements: str
        :param kind: kind
        :type kind: str
        :param optional: optional
        :type optional: bool
        :param after: filter by id after given id
        :type after: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dependencies_serialize(
            page=page,
            per_page=per_page,
            ecosystem=ecosystem,
            package_name=package_name,
            package_id=package_id,
            requirements=requirements,
            kind=kind,
            optional=optional,
            after=after,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Dependency]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_dependencies_without_preload_content(
        self,
        page: Annotated[Optional[StrictInt], Field(description="pagination page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records to return")] = None,
        ecosystem: Annotated[Optional[StrictStr], Field(description="ecosystem name")] = None,
        package_name: Annotated[Optional[StrictStr], Field(description="package name")] = None,
        package_id: Annotated[Optional[StrictStr], Field(description="package id")] = None,
        requirements: Annotated[Optional[StrictStr], Field(description="requirements")] = None,
        kind: Annotated[Optional[StrictStr], Field(description="kind")] = None,
        optional: Annotated[Optional[StrictBool], Field(description="optional")] = None,
        after: Annotated[Optional[StrictStr], Field(description="filter by id after given id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list dependencies


        :param page: pagination page number
        :type page: int
        :param per_page: Number of records to return
        :type per_page: int
        :param ecosystem: ecosystem name
        :type ecosystem: str
        :param package_name: package name
        :type package_name: str
        :param package_id: package id
        :type package_id: str
        :param requirements: requirements
        :type requirements: str
        :param kind: kind
        :type kind: str
        :param optional: optional
        :type optional: bool
        :param after: filter by id after given id
        :type after: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dependencies_serialize(
            page=page,
            per_page=per_page,
            ecosystem=ecosystem,
            package_name=package_name,
            package_id=package_id,
            requirements=requirements,
            kind=kind,
            optional=optional,
            after=after,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Dependency]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_dependencies_serialize(
        self,
        page,
        per_page,
        ecosystem,
        package_name,
        package_id,
        requirements,
        kind,
        optional,
        after,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if ecosystem is not None:
            
            _query_params.append(('ecosystem', ecosystem))
            
        if package_name is not None:
            
            _query_params.append(('package_name', package_name))
            
        if package_id is not None:
            
            _query_params.append(('package_id', package_id))
            
        if requirements is not None:
            
            _query_params.append(('requirements', requirements))
            
        if kind is not None:
            
            _query_params.append(('kind', kind))
            
        if optional is not None:
            
            _query_params.append(('optional', optional))
            
        if after is not None:
            
            _query_params.append(('after', after))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/dependencies',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


