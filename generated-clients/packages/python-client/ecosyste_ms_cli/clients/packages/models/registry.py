# coding: utf-8

"""
    Ecosyste.ms: Packages

    An open API service providing package, version and dependency metadata of many open source software ecosystems and registries.

    The version of the OpenAPI document: 1.1.0
    Contact: support@ecosyste.ms
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Registry(BaseModel):
    """
    Registry
    """ # noqa: E501
    name: StrictStr
    url: StrictStr
    ecosystem: StrictStr
    default: StrictBool
    packages_count: StrictInt
    versions_count: Optional[StrictInt] = None
    maintainers_count: StrictInt
    namespaces_count: StrictInt
    keywords_count: StrictInt
    downloads: StrictInt
    github: Optional[StrictStr]
    metadata: Optional[Dict[str, Any]]
    created_at: datetime
    updated_at: datetime
    packages_url: StrictStr
    maintainers_url: StrictStr
    icon_url: StrictStr
    purl_type: StrictStr
    __properties: ClassVar[List[str]] = ["name", "url", "ecosystem", "default", "packages_count", "versions_count", "maintainers_count", "namespaces_count", "keywords_count", "downloads", "github", "metadata", "created_at", "updated_at", "packages_url", "maintainers_url", "icon_url", "purl_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Registry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if github (nullable) is None
        # and model_fields_set contains the field
        if self.github is None and "github" in self.model_fields_set:
            _dict['github'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Registry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "url": obj.get("url"),
            "ecosystem": obj.get("ecosystem"),
            "default": obj.get("default"),
            "packages_count": obj.get("packages_count"),
            "versions_count": obj.get("versions_count"),
            "maintainers_count": obj.get("maintainers_count"),
            "namespaces_count": obj.get("namespaces_count"),
            "keywords_count": obj.get("keywords_count"),
            "downloads": obj.get("downloads"),
            "github": obj.get("github"),
            "metadata": obj.get("metadata"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "packages_url": obj.get("packages_url"),
            "maintainers_url": obj.get("maintainers_url"),
            "icon_url": obj.get("icon_url"),
            "purl_type": obj.get("purl_type")
        })
        return _obj


