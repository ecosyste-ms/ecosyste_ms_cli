# coding: utf-8

"""
    Ecosyste.ms: Packages

    An open API service providing package, version and dependency metadata of many open source software ecosystems and registries.

    The version of the OpenAPI document: 1.1.0
    Contact: support@ecosyste.ms
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ecosyste_ms_cli.clients.packages.models.dependency import Dependency
from typing import Optional, Set
from typing_extensions import Self

class VersionWithDependencies(BaseModel):
    """
    VersionWithDependencies
    """ # noqa: E501
    id: Optional[StrictInt] = None
    number: StrictStr
    published_at: Optional[StrictStr]
    licenses: Optional[StrictStr]
    integrity: Optional[StrictStr]
    status: Optional[StrictStr]
    download_url: Optional[StrictStr]
    registry_url: Optional[StrictStr]
    documentation_url: Optional[StrictStr]
    install_command: Optional[StrictStr]
    metadata: Optional[Dict[str, Any]]
    created_at: datetime
    updated_at: datetime
    purl: StrictStr
    version_url: StrictStr
    related_tag: Dict[str, Any]
    latest: StrictBool
    dependencies: List[Dependency]
    __properties: ClassVar[List[str]] = ["id", "number", "published_at", "licenses", "integrity", "status", "download_url", "registry_url", "documentation_url", "install_command", "metadata", "created_at", "updated_at", "purl", "version_url", "related_tag", "latest", "dependencies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VersionWithDependencies from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dependencies (list)
        _items = []
        if self.dependencies:
            for _item_dependencies in self.dependencies:
                if _item_dependencies:
                    _items.append(_item_dependencies.to_dict())
            _dict['dependencies'] = _items
        # set to None if published_at (nullable) is None
        # and model_fields_set contains the field
        if self.published_at is None and "published_at" in self.model_fields_set:
            _dict['published_at'] = None

        # set to None if licenses (nullable) is None
        # and model_fields_set contains the field
        if self.licenses is None and "licenses" in self.model_fields_set:
            _dict['licenses'] = None

        # set to None if integrity (nullable) is None
        # and model_fields_set contains the field
        if self.integrity is None and "integrity" in self.model_fields_set:
            _dict['integrity'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if download_url (nullable) is None
        # and model_fields_set contains the field
        if self.download_url is None and "download_url" in self.model_fields_set:
            _dict['download_url'] = None

        # set to None if registry_url (nullable) is None
        # and model_fields_set contains the field
        if self.registry_url is None and "registry_url" in self.model_fields_set:
            _dict['registry_url'] = None

        # set to None if documentation_url (nullable) is None
        # and model_fields_set contains the field
        if self.documentation_url is None and "documentation_url" in self.model_fields_set:
            _dict['documentation_url'] = None

        # set to None if install_command (nullable) is None
        # and model_fields_set contains the field
        if self.install_command is None and "install_command" in self.model_fields_set:
            _dict['install_command'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VersionWithDependencies from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "number": obj.get("number"),
            "published_at": obj.get("published_at"),
            "licenses": obj.get("licenses"),
            "integrity": obj.get("integrity"),
            "status": obj.get("status"),
            "download_url": obj.get("download_url"),
            "registry_url": obj.get("registry_url"),
            "documentation_url": obj.get("documentation_url"),
            "install_command": obj.get("install_command"),
            "metadata": obj.get("metadata"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "purl": obj.get("purl"),
            "version_url": obj.get("version_url"),
            "related_tag": obj.get("related_tag"),
            "latest": obj.get("latest"),
            "dependencies": [Dependency.from_dict(_item) for _item in obj["dependencies"]] if obj.get("dependencies") is not None else None
        })
        return _obj


