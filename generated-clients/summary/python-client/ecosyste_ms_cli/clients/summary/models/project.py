# coding: utf-8

"""
    Ecosyste.ms: summary

    An open API service for producing an overview of a list of open source projects.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ecosyste.ms
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Project(BaseModel):
    """
    Project
    """ # noqa: E501
    id: Optional[StrictInt] = None
    url: Optional[StrictStr] = None
    last_synced_at: Optional[datetime] = None
    repository: Optional[Dict[str, Any]] = None
    owner: Optional[Dict[str, Any]] = None
    packages: Optional[List[Dict[str, Any]]] = None
    commits: Optional[Dict[str, Any]] = None
    issues: Optional[Dict[str, Any]] = None
    events: Optional[Dict[str, Any]] = None
    keywords: Optional[List[StrictStr]] = None
    dependencies: Optional[Dict[str, Any]] = None
    score: Optional[Union[StrictFloat, StrictInt]] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    avatar_url: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    publiccode: Optional[Dict[str, Any]] = None
    codemeta: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["id", "url", "last_synced_at", "repository", "owner", "packages", "commits", "issues", "events", "keywords", "dependencies", "score", "created_at", "updated_at", "avatar_url", "language", "publiccode", "codemeta"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "url": obj.get("url"),
            "last_synced_at": obj.get("last_synced_at"),
            "repository": obj.get("repository"),
            "owner": obj.get("owner"),
            "packages": obj.get("packages"),
            "commits": obj.get("commits"),
            "issues": obj.get("issues"),
            "events": obj.get("events"),
            "keywords": obj.get("keywords"),
            "dependencies": obj.get("dependencies"),
            "score": obj.get("score"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "avatar_url": obj.get("avatar_url"),
            "language": obj.get("language"),
            "publiccode": obj.get("publiccode"),
            "codemeta": obj.get("codemeta")
        })
        return _obj


